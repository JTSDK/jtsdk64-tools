{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Version v3.2.0 \u00b6 JTSDK64 Tools is a collection of 64-Bit Open Source frameworks, library's and associated utilities focused on compiling WSJT-X which is designed for weak-signal digital communication used by Amateur Radio operators world wide. The primary focus of this document is to install and configure JTSDK64 Core Tools , or the minimal requirements for compiling WSJT-X including Hamlib and Boost . Everything else is secondary and will posted in supplemental sections when available. Community Support \u00b6 To assist users with installation, usage, compiling applications, and general discussion, use: Post: JTSDK@groups.io Subscribe: JTSDK+subscribe@groups.io Unsubscribe: JTSDK+unsubscribe@groups.io Group Owner: JTSDK+owner@groups.io Help: JTSDK+help@groups.io Bug Reports \u00b6 For submitting bug reports and feature requests, use the Issue Tracker . The aim of JTSDK64-Tools is to use an Agile delivery approach to create a high-quality, yet flexible build system. Utilizing Github's Issue Tracker . users can quickly see the status of any particular request, discuss the merits, and implement the final disposition.","title":"Home"},{"location":"#version-v320","text":"JTSDK64 Tools is a collection of 64-Bit Open Source frameworks, library's and associated utilities focused on compiling WSJT-X which is designed for weak-signal digital communication used by Amateur Radio operators world wide. The primary focus of this document is to install and configure JTSDK64 Core Tools , or the minimal requirements for compiling WSJT-X including Hamlib and Boost . Everything else is secondary and will posted in supplemental sections when available.","title":"Version v3.2.0"},{"location":"#community-support","text":"To assist users with installation, usage, compiling applications, and general discussion, use: Post: JTSDK@groups.io Subscribe: JTSDK+subscribe@groups.io Unsubscribe: JTSDK+unsubscribe@groups.io Group Owner: JTSDK+owner@groups.io Help: JTSDK+help@groups.io","title":"Community Support"},{"location":"#bug-reports","text":"For submitting bug reports and feature requests, use the Issue Tracker . The aim of JTSDK64-Tools is to use an Agile delivery approach to create a high-quality, yet flexible build system. Utilizing Github's Issue Tracker . users can quickly see the status of any particular request, discuss the merits, and implement the final disposition.","title":"Bug Reports"},{"location":"credits/","text":"Under Development This section will will list (where possible) those that have contributed to the project.","title":"Credits"},{"location":"boost/overview/","text":"Under Construction This section will discuss the various aspect of compiling Boost from source.","title":"Overview"},{"location":"contribute/overview/","text":"Under Construction This section will discuss how you can contribute to the JTSDK Project.","title":"Overview"},{"location":"hamlib/overview/","text":"Under Construction This section will discuss various aspects of compiling Hamlib.","title":"Overview"},{"location":"js8call/overview/","text":"Under Construction This section will discuss various aspects of compiling JS8CALL .","title":"Overview"},{"location":"jtdx/overview/","text":"Under Construction This section will discuss various aspects of compiling JTDX .","title":"Overview"},{"location":"msys2/overview/","text":"Under Construction This section will discuss various aspects of using MSYS2 and compiling Hamlib.","title":"Overview"},{"location":"setup/baseinstall/","text":"Base Installation \u00b6 This section will cover the base tool(s) installation using the InnoSetup Installer. For most of the screens, one only needs to use the default(s) provided. Note The images presented during installation were snipped on a new VirtualBox Win-10 image. Nothing was installed apart from ensuring the image had the latest updates from Microsoft. The Edge Browser is part of the Windows 10 image and set as default by Microsoft. Download Installer \u00b6 Download the lateest version of JTSDK64-Tools v3.2.0 from Hamlib-SDK , then search your download folder for the installer. Direct Download Link SHA1 and MD5 validation is available from Hamlib-SDK by using the information icon next to the file in question. SHA and MD5 Validaiton Location of downloaded installer package. Downloaded Installer File Run Installer \u00b6 Double-Click the installer to begin, after which you will be presented with the Win-10 protection widget. Use the More Info link to procede. Double-Click Installer When prompted, select the More Info link and then Run Anyway More Infor Selection Accept the License terms and click Next Accept License Terms Use the default Destination Location and click Next Destination Location Use the default Start menu folder and click Next Start Menu Folder (Recommended but Optional) - Create Desktop Shortcuts. Desktop Shortcuts Verify Installation information and start. Ready to Install Upon sucessfiul installaiton, click Finish . Finish Base Install Verify Desktop Icons \u00b6 After a sucessful installaiton (if you elected desktop shortcuts above), you should have two new icon's present. You can run them from the desktop, or the Windows menu system. The choice is yours. JTSDK64-Tools JTSDK64-Setup New Desktop Icon's","title":"2. Base Install"},{"location":"setup/baseinstall/#base-installation","text":"This section will cover the base tool(s) installation using the InnoSetup Installer. For most of the screens, one only needs to use the default(s) provided. Note The images presented during installation were snipped on a new VirtualBox Win-10 image. Nothing was installed apart from ensuring the image had the latest updates from Microsoft. The Edge Browser is part of the Windows 10 image and set as default by Microsoft.","title":"Base Installation"},{"location":"setup/baseinstall/#download-installer","text":"Download the lateest version of JTSDK64-Tools v3.2.0 from Hamlib-SDK , then search your download folder for the installer. Direct Download Link SHA1 and MD5 validation is available from Hamlib-SDK by using the information icon next to the file in question. SHA and MD5 Validaiton Location of downloaded installer package. Downloaded Installer File","title":"Download Installer"},{"location":"setup/baseinstall/#run-installer","text":"Double-Click the installer to begin, after which you will be presented with the Win-10 protection widget. Use the More Info link to procede. Double-Click Installer When prompted, select the More Info link and then Run Anyway More Infor Selection Accept the License terms and click Next Accept License Terms Use the default Destination Location and click Next Destination Location Use the default Start menu folder and click Next Start Menu Folder (Recommended but Optional) - Create Desktop Shortcuts. Desktop Shortcuts Verify Installation information and start. Ready to Install Upon sucessfiul installaiton, click Finish . Finish Base Install","title":"Run Installer"},{"location":"setup/baseinstall/#verify-desktop-icons","text":"After a sucessful installaiton (if you elected desktop shortcuts above), you should have two new icon's present. You can run them from the desktop, or the Windows menu system. The choice is yours. JTSDK64-Tools JTSDK64-Setup New Desktop Icon's","title":"Verify Desktop Icons"},{"location":"setup/buildconfig/","text":"Build Confiuration \u00b6 In this setion you will set the default variables used to compile various elements in the remainder of the setup process. There will be a detailed review of each item listed in Versions.ini , but for now, we will only be looking at a few key parameters. Note At present, setting the configuration variables is a manual process to a degree. In future releases this will be a more elegant solution. Version File Update \u00b6 Now is a good time to set several variables that will be used when building Hamlib , Deploying Boost and compiling WSJT-X . The options of immediate concern are: cleanfirst reconfigure autorun cpuusage To set these variables, open the the JTSDK64-Tools , then using VS Code issue the following command: # In JTSDK64-Tools, at the prompt, type: code .\\ config \\ Versions . ini This will open the Version.ini file in VS Code editor. Set the variables as indicated below. JTSDK64-Tools Environment Note What one uses for CPU count is entirely up to the them. Just know, the more threads you use, the faster build times will be. Most are using a Virtual Machine, and in doing so, they use all the cores they've allocated in the VM. The optins are All , Half , or Solo . For the remainder of options, there is only Yes or No available. Set the following options: cleanfirst=Yes reconfigure=Yes autorun=No cpuusage=All Save and exit VS Code. After saving the file, close and re-open the JTSDK64-Tools Environment. Proceed to the MSYS2 setup section.","title":"4. Build Config"},{"location":"setup/buildconfig/#build-confiuration","text":"In this setion you will set the default variables used to compile various elements in the remainder of the setup process. There will be a detailed review of each item listed in Versions.ini , but for now, we will only be looking at a few key parameters. Note At present, setting the configuration variables is a manual process to a degree. In future releases this will be a more elegant solution.","title":"Build Confiuration"},{"location":"setup/buildconfig/#version-file-update","text":"Now is a good time to set several variables that will be used when building Hamlib , Deploying Boost and compiling WSJT-X . The options of immediate concern are: cleanfirst reconfigure autorun cpuusage To set these variables, open the the JTSDK64-Tools , then using VS Code issue the following command: # In JTSDK64-Tools, at the prompt, type: code .\\ config \\ Versions . ini This will open the Version.ini file in VS Code editor. Set the variables as indicated below. JTSDK64-Tools Environment Note What one uses for CPU count is entirely up to the them. Just know, the more threads you use, the faster build times will be. Most are using a Virtual Machine, and in doing so, they use all the cores they've allocated in the VM. The optins are All , Half , or Solo . For the remainder of options, there is only Yes or No available. Set the following options: cleanfirst=Yes reconfigure=Yes autorun=No cpuusage=All Save and exit VS Code. After saving the file, close and re-open the JTSDK64-Tools Environment. Proceed to the MSYS2 setup section.","title":"Version File Update"},{"location":"setup/buildhamlib/","text":"Build Hamlib \u00b6 If all has gone without error to this point, you are ready to build Hamlib from a git repository. At present, the preferred repository is the Hamlib Master. If this changes for WSJT-X, you can always adjust it with menu option ( 8 ). Using the MSYS2 Menu, select option ( 8 ), followed by selecting ( 1 ) to set the Mater Repository, then ( e ) to return to the main menu. Note The default selection is set to hlmaster during the base installation. This step is to illustrate how to change the repository if and when it is needed. Select Hamlib Repository After setting the repository, use the menu option ( 5 ) to commence the Hamlib build. If all goes as expected, you should see results similar to the following: During the Build: Hamlib Build Progress Completed Build: Hamlib Build Results This concludes building Hamlib. You can close MSYS2 , and move back to the JTSDK64-Tool environment for the next step.","title":"6. Build Hamlib"},{"location":"setup/buildhamlib/#build-hamlib","text":"If all has gone without error to this point, you are ready to build Hamlib from a git repository. At present, the preferred repository is the Hamlib Master. If this changes for WSJT-X, you can always adjust it with menu option ( 8 ). Using the MSYS2 Menu, select option ( 8 ), followed by selecting ( 1 ) to set the Mater Repository, then ( e ) to return to the main menu. Note The default selection is set to hlmaster during the base installation. This step is to illustrate how to change the repository if and when it is needed. Select Hamlib Repository After setting the repository, use the menu option ( 5 ) to commence the Hamlib build. If all goes as expected, you should see results similar to the following: During the Build: Hamlib Build Progress Completed Build: Hamlib Build Results This concludes building Hamlib. You can close MSYS2 , and move back to the JTSDK64-Tool environment for the next step.","title":"Build Hamlib"},{"location":"setup/conslusion/","text":"Setup Conslusion \u00b6 This setup process only touched on the basics of what the environment can do. Exploring the remaining sections will help to understand the vast capabilities a collection of this sort is capable of. As time goes on with the this stream, more documentation will be added to highlight use case senarios in addition to more advanced topics of the JTSDK64-Tools echosystem. Desktop Final Results \u00b6 After running the WSJT-X package installer, and if you followed the recommendations in this guide, you should have several new desktop items available: New Desktop Icons If you made it this far Go Have a Beer and Celebrate !!","title":"9. Conslusion"},{"location":"setup/conslusion/#setup-conslusion","text":"This setup process only touched on the basics of what the environment can do. Exploring the remaining sections will help to understand the vast capabilities a collection of this sort is capable of. As time goes on with the this stream, more documentation will be added to highlight use case senarios in addition to more advanced topics of the JTSDK64-Tools echosystem.","title":"Setup Conslusion"},{"location":"setup/conslusion/#desktop-final-results","text":"After running the WSJT-X package installer, and if you followed the recommendations in this guide, you should have several new desktop items available: New Desktop Icons If you made it this far Go Have a Beer and Celebrate !!","title":"Desktop Final Results"},{"location":"setup/deployboost/","text":"Deploy Boost \u00b6 There are several options for deploying Boost within the JTSDK64-Tools echosystem. This example will be compiling the library from source so as to test the tool chain and ensure the artifacts are compiled against the same GCC components used to build WSJT-X . Warning Downloading, extracting, and compling Boost can take a very long time , in some cases, many hours. Even with high-resource systems and extremely fast internet connections, you are looking at 15 to 20 minutes minimum . Additionally, JTSDK64-Tools has the ability to build multiple versions of Boost . However, WSJT-X needs version 1.74.0 which is the default for the Boost-Deploy invocation. Variations of building Boost will be covered in the Boost section when it's written. Start Deployment \u00b6 All that is required to kick off the Boost build process is to call the Deploy-Boost function from the JTSDK64-Tools environment In JTSDK64-Tools environment, simply type: Deploy-Boost Deploy Boost Invocation Boost Unzip Prgoress \u00b6 This steps is very slow, so be patient. Unzip Boost Archive CPU and Memoy Usage \u00b6 CPU Usage during the build process can be quite high. It is best to leave it run and not try to perform other tasks during compilation. Boost CPU Usage With tests performed in a Virtual Machine given 32GB of RAM, the max memory usage appears to be around 13GB to 15GB without any custom settings. A VM allocation of 16GB looks to be a good number for those looking to trim the numebrs. Boost Memory Usage Sucessful Completion \u00b6 While there are stated failed updates and skipped targets, the build appears to work as expected using the Qt tool chain. As stated in this image, the artifacts are moved to the 1.74.0 boost directory and ready for use in building WSJT-X . Sucessful Build Boost Validation \u00b6 To ensure the environment picks up the newly built Boost libraries, close then re-open the JTSDK64-Tools environment. Caution This verification does not prove complete functionality, only that the directory or contents are present and JTSDK64-Tools sees the library as Deployed . Boost Presence Validation This concludes building Deploying Boost. If there were no critical failures, you can proceed to builing the WSJT-X package.","title":"7. Deploy Boost"},{"location":"setup/deployboost/#deploy-boost","text":"There are several options for deploying Boost within the JTSDK64-Tools echosystem. This example will be compiling the library from source so as to test the tool chain and ensure the artifacts are compiled against the same GCC components used to build WSJT-X . Warning Downloading, extracting, and compling Boost can take a very long time , in some cases, many hours. Even with high-resource systems and extremely fast internet connections, you are looking at 15 to 20 minutes minimum . Additionally, JTSDK64-Tools has the ability to build multiple versions of Boost . However, WSJT-X needs version 1.74.0 which is the default for the Boost-Deploy invocation. Variations of building Boost will be covered in the Boost section when it's written.","title":"Deploy Boost"},{"location":"setup/deployboost/#start-deployment","text":"All that is required to kick off the Boost build process is to call the Deploy-Boost function from the JTSDK64-Tools environment In JTSDK64-Tools environment, simply type: Deploy-Boost Deploy Boost Invocation","title":"Start Deployment"},{"location":"setup/deployboost/#boost-unzip-prgoress","text":"This steps is very slow, so be patient. Unzip Boost Archive","title":"Boost Unzip Prgoress"},{"location":"setup/deployboost/#cpu-and-memoy-usage","text":"CPU Usage during the build process can be quite high. It is best to leave it run and not try to perform other tasks during compilation. Boost CPU Usage With tests performed in a Virtual Machine given 32GB of RAM, the max memory usage appears to be around 13GB to 15GB without any custom settings. A VM allocation of 16GB looks to be a good number for those looking to trim the numebrs. Boost Memory Usage","title":"CPU and Memoy Usage"},{"location":"setup/deployboost/#sucessful-completion","text":"While there are stated failed updates and skipped targets, the build appears to work as expected using the Qt tool chain. As stated in this image, the artifacts are moved to the 1.74.0 boost directory and ready for use in building WSJT-X . Sucessful Build","title":"Sucessful Completion"},{"location":"setup/deployboost/#boost-validation","text":"To ensure the environment picks up the newly built Boost libraries, close then re-open the JTSDK64-Tools environment. Caution This verification does not prove complete functionality, only that the directory or contents are present and JTSDK64-Tools sees the library as Deployed . Boost Presence Validation This concludes building Deploying Boost. If there were no critical failures, you can proceed to builing the WSJT-X package.","title":"Boost Validation"},{"location":"setup/msys2setup/","text":"MSYS2 Setup \u00b6 In this setion, the following tasks will be performed in the MSYS2 Terminal lauched from within JTSDK64-Tools Environment . Before proceeding, ensure you have closed JTSDK64-Tools-Setup and any MSYS2 terminals before opening the JTSDK64-Tools Environment. Caution With MSYS2, Do Not use the RED - X to close the terminal. Get in a habit of typing exit from within the terminal itself to properly close the session as not doing so can cause stranded threads and other anamolies in the environment. Tasks to perform: Open JTSDK64-Tools Environment Launch MSYS2 terminal Update MSYS2 via menu option (2) Install Hamlib Dependencies via menu option (3) Update the MSYS2 Keyring via the menu option (4) Close and Re-Open MSYS2 from JTSDK64-Tools Environment Build Hamlib Static assemblies via menu option (5) Open JTSDK64-Tools \u00b6 From the Desktop Link or Windows Search menu, find and launch the JTSDK54-Tools environment, then launch MSYS2 from the command-line. # In the JTSDK64-Tools Powershell environment, type: msys2 Upon opening MSYS2 ensure you have a Qt version listed at the top of the terminal. If you do not, you need invistigate why it is not present before continuing. MSYS2 Base Terminal Update MSYS2 Packages \u00b6 From the main MSYS2 terminal, launch the menu and update the packaging using menu option (2) MSYS2 Main Menu At the completion of the update, exit the menu system (type exit from the MSYS2 trerminal) and re-open MSYS2 from JTSDK54-Tools again. Note Over time, there may be more package updates than what is shown in this document and your results may not always match the example presented here. This is normal, and to a degree, expected. MSYS2 Package update completion Install Hamlib Dependencies \u00b6 After updating MSYS2 packages, it's time to install Hamlib Dependencies . From the MSYS2 Menu , select option (3). At the completion of this step, there is no need to close and re-open MSYS2 again, just proceed to the next step. Install Hamlib Dependencies Update MSYS2 Keyring \u00b6 While it's debatable, the keyring update is being performed after the initial Hamlib dependency installation. After running this step, close and re-open MSYS2 from the JTSDK64-Tools environment. From the MSYS2 menu, select option (4) top update the keyring. Update MSYS2 Keyring This concludes the MSYS2 update portion. Close and re-open MSYS2 , and proceed to the next step.","title":"5. MSYS2 Setup"},{"location":"setup/msys2setup/#msys2-setup","text":"In this setion, the following tasks will be performed in the MSYS2 Terminal lauched from within JTSDK64-Tools Environment . Before proceeding, ensure you have closed JTSDK64-Tools-Setup and any MSYS2 terminals before opening the JTSDK64-Tools Environment. Caution With MSYS2, Do Not use the RED - X to close the terminal. Get in a habit of typing exit from within the terminal itself to properly close the session as not doing so can cause stranded threads and other anamolies in the environment. Tasks to perform: Open JTSDK64-Tools Environment Launch MSYS2 terminal Update MSYS2 via menu option (2) Install Hamlib Dependencies via menu option (3) Update the MSYS2 Keyring via the menu option (4) Close and Re-Open MSYS2 from JTSDK64-Tools Environment Build Hamlib Static assemblies via menu option (5)","title":"MSYS2 Setup"},{"location":"setup/msys2setup/#open-jtsdk64-tools","text":"From the Desktop Link or Windows Search menu, find and launch the JTSDK54-Tools environment, then launch MSYS2 from the command-line. # In the JTSDK64-Tools Powershell environment, type: msys2 Upon opening MSYS2 ensure you have a Qt version listed at the top of the terminal. If you do not, you need invistigate why it is not present before continuing. MSYS2 Base Terminal","title":"Open JTSDK64-Tools"},{"location":"setup/msys2setup/#update-msys2-packages","text":"From the main MSYS2 terminal, launch the menu and update the packaging using menu option (2) MSYS2 Main Menu At the completion of the update, exit the menu system (type exit from the MSYS2 trerminal) and re-open MSYS2 from JTSDK54-Tools again. Note Over time, there may be more package updates than what is shown in this document and your results may not always match the example presented here. This is normal, and to a degree, expected. MSYS2 Package update completion","title":"Update MSYS2 Packages"},{"location":"setup/msys2setup/#install-hamlib-dependencies","text":"After updating MSYS2 packages, it's time to install Hamlib Dependencies . From the MSYS2 Menu , select option (3). At the completion of this step, there is no need to close and re-open MSYS2 again, just proceed to the next step. Install Hamlib Dependencies","title":"Install Hamlib Dependencies"},{"location":"setup/msys2setup/#update-msys2-keyring","text":"While it's debatable, the keyring update is being performed after the initial Hamlib dependency installation. After running this step, close and re-open MSYS2 from the JTSDK64-Tools environment. From the MSYS2 menu, select option (4) top update the keyring. Update MSYS2 Keyring This concludes the MSYS2 update portion. Close and re-open MSYS2 , and proceed to the next step.","title":"Update MSYS2 Keyring"},{"location":"setup/overview/","text":"Setup Overview \u00b6 This section will walk users through (step-by-step) the process of installing all required componsnts for compiling Hamlib , Boost , and fiinally WSJT-X . If you follow this guide you should have a working WSJT-X package that can be installed upon completion. It is highly recommended that users uninstall all previous JTSDK components before using this guide. There are ways to work around this requirement, however, it can be teadious and error prone. For the best results, a clean install is the development teams recomendation. Installation Order \u00b6 While some areas can be skipped, or added later, this guide--and this authors personal recommendation--will proceed in the oder listed. Advanced users may elect to move through the order as they see fit, however, be aware of the limitation and potential for issues in doing so. Living Document \u00b6 Many sections of this site are under construction . As new content is made available it will be added to the site after review. All content will remain relevant to the latest release of the JTSDK64-Tools v3.2.x Stream . Any Change to the Major or Minor version schema will result in a tag of the existing main branch and migration to the next release. Preferred Environment \u00b6 If and where possible, users should first install JTSDK64-Tools in a Virtual Machine (VM). While the process aims to prevent unforseen events to the users main system, there is always the potential for issues to ariase, thus, using a VM will help mitigate such risk. System Requierments \u00b6 There is no question, the more system resources (CPU cores, RAM, Disk IO, Network Speed, etc) the coompiling system has, the better the overall performance will be. Completion times, based on a wide range od end-user reports, have ranged from 2.5 hours to a full day , so plan accordingly. By far, the most time intensive elements for the the entire setup process is related to downloing and installing Qt , followed by a lengthy compile time for Boost . While one can get away with a small comodity-based computer for development work, the following would be a safe-minimun for those wanting somewhat reasonable performance: CPU with 4 cores (8 threads) or more RAM of at least 8GB, 16GB or more preferred SSD disk IO wherever possible, or a high RPM (10K+) SAS/SATA spin drive At least 15Gb to 20GB of free disk space Network Speed, the higher the better, but 2Mbps to 4Mbps at a minimum.","title":"Overview"},{"location":"setup/overview/#setup-overview","text":"This section will walk users through (step-by-step) the process of installing all required componsnts for compiling Hamlib , Boost , and fiinally WSJT-X . If you follow this guide you should have a working WSJT-X package that can be installed upon completion. It is highly recommended that users uninstall all previous JTSDK components before using this guide. There are ways to work around this requirement, however, it can be teadious and error prone. For the best results, a clean install is the development teams recomendation.","title":"Setup Overview"},{"location":"setup/overview/#installation-order","text":"While some areas can be skipped, or added later, this guide--and this authors personal recommendation--will proceed in the oder listed. Advanced users may elect to move through the order as they see fit, however, be aware of the limitation and potential for issues in doing so.","title":"Installation Order"},{"location":"setup/overview/#living-document","text":"Many sections of this site are under construction . As new content is made available it will be added to the site after review. All content will remain relevant to the latest release of the JTSDK64-Tools v3.2.x Stream . Any Change to the Major or Minor version schema will result in a tag of the existing main branch and migration to the next release.","title":"Living Document"},{"location":"setup/overview/#preferred-environment","text":"If and where possible, users should first install JTSDK64-Tools in a Virtual Machine (VM). While the process aims to prevent unforseen events to the users main system, there is always the potential for issues to ariase, thus, using a VM will help mitigate such risk.","title":"Preferred Environment"},{"location":"setup/overview/#system-requierments","text":"There is no question, the more system resources (CPU cores, RAM, Disk IO, Network Speed, etc) the coompiling system has, the better the overall performance will be. Completion times, based on a wide range od end-user reports, have ranged from 2.5 hours to a full day , so plan accordingly. By far, the most time intensive elements for the the entire setup process is related to downloing and installing Qt , followed by a lengthy compile time for Boost . While one can get away with a small comodity-based computer for development work, the following would be a safe-minimun for those wanting somewhat reasonable performance: CPU with 4 cores (8 threads) or more RAM of at least 8GB, 16GB or more preferred SSD disk IO wherever possible, or a high RPM (10K+) SAS/SATA spin drive At least 15Gb to 20GB of free disk space Network Speed, the higher the better, but 2Mbps to 4Mbps at a minimum.","title":"System Requierments"},{"location":"setup/packagewsjtx/","text":"Package WSJT-X \u00b6 For the final test you will run the WSJT-X package build option. Using the package option will exercise most of the critical components of the tool chain against a default configuration. JTBuild Package \u00b6 For this step we use jtbuild to kick off the the process. # At the prompt in `JTSDK64-Tools, type: jtbuild package JTBUILD Package Invocation Competed Package \u00b6 The output from a sucessful build should resemble the following: Sucessful Package Build WSJT-X Installed \u00b6 The last, and most important step, is run the package installer to verify WSJT-X is functional. WSJT-X Running after Install This concludes the setup and test sections for JTSDK64-Tools .","title":"8. Package WSJT-X"},{"location":"setup/packagewsjtx/#package-wsjt-x","text":"For the final test you will run the WSJT-X package build option. Using the package option will exercise most of the critical components of the tool chain against a default configuration.","title":"Package WSJT-X"},{"location":"setup/packagewsjtx/#jtbuild-package","text":"For this step we use jtbuild to kick off the the process. # At the prompt in `JTSDK64-Tools, type: jtbuild package JTBUILD Package Invocation","title":"JTBuild Package"},{"location":"setup/packagewsjtx/#competed-package","text":"The output from a sucessful build should resemble the following: Sucessful Package Build","title":"Competed Package"},{"location":"setup/packagewsjtx/#wsjt-x-installed","text":"The last, and most important step, is run the package installer to verify WSJT-X is functional. WSJT-X Running after Install This concludes the setup and test sections for JTSDK64-Tools .","title":"WSJT-X Installed"},{"location":"setup/postinstall/","text":"Post Installation \u00b6 The post install section will walk users though the required actions following the base installation. By far, postinstall represents the lions share of the setup and will perform the following tasks: VC/C++ Runtime Installation Git-SCM installaiton VS Code installation Qt configuration (default of full) Initial MSYS2 Setup This process can take from an hour or so to many hours depending on your system resources and internet speed. Note As of this writing (3/6/2021) , the Qt Online Installer has a circular dependency on MS VC redit dll's. They are not present in a new Win-10 image, yet the Qt Online Installer requires them to run. As such, the postinstall script will download and install them for you prior to running the Qt Online Installer . JTSDK64 Tools Setup \u00b6 After completing the base installation, use the desktop icon or Win-10 search bar to find and open JTSDK64-Tools-Setup . Upon initial opening, you should see the following screen. At the prompt, just hit enter. JTSDK64 Setup Initial Screen Once you are at the Post Install Setup Selection screen you will see the current environment. At the prompt, type: postinstall JTSDK64 Setup Initial Screen Tool Selection \u00b6 For this example, we will be using a minimal install configuration for building WSJT-X . Set the following defaults when asked: VC Redist set tp Y Omnirig set to Y Git-SCM set tp Y Default Qt set tp D MSYS2 Setup set to Y VS Code set to Y Note VS Code is optional. However, it is a highly capable editor that performs many tasks including integrated Bash, PowerShell and Windows CMD terminals. It's up to the user, but, the development team recommends its use. JTSDK64 Setup Tools Selection VC Redist Install \u00b6 The first action will be to downloand and install MS VS Redist. This is mostly automated, but you will be prompeted to allow installation by the normal Windows UAC prompts. VS Redist Installation Install Omnirig \u00b6 Next up is Omnirig. If the download is sucessful (sometimes the download fails, so be prepared) you will see the install wizard appear. Use the defaults and progress through all screens using the Next button. Omnirig Installation Omnirig Install Prompt. Omnirig Installation Prompt Install VS Code \u00b6 The VS Code installer should appear, and again you should be prompted with the normal Windows UAC prompts. VS Code Installation Qt Installation \u00b6 The Qt installation can be a rather lengthy process. The default selection installs all that is needed for a base WSJT-X build. When the UX appears, you will need the following: Your Qt account username/email address Your Qt account Password Qt Account Screen Open Source Obligations. Have a read though them if this is the first time using Qt. Additional, ensure you check the box stating you are an individual user, not a company. Qt Open Source Obligations Sending usage stats. While this is optional, it helps the Qt Developers find and resolve high impacts bugs. Participation is up to the end users, but, it seems a fitting thing to do for the Open Source Community. Qt Contribute to Development Component selction and agreements are pre-selected for you. All that is left at this point is to sit back and wait for the download an installation to progress. Note The only way to cancel the UX at this point (becasue it's scripted) is to use the Windows Task Manager to kill the process (if needed). Qt Download and Installation Upon completion, you will see (in the Powershell Environment) what components were installed. Qt Installed Components Message Close JTSDK64 Tools Setup \u00b6 At this point, if there were no errors or problems with the automated installers, you are ready to setup MSYS2. This will all be performed in the standard JTSDK64-Tools environment not JTSDK64-Tools-Setup . Close JTSDK64-Tools-Setup environment. Proceed to the next section.","title":"3. Post Install"},{"location":"setup/postinstall/#post-installation","text":"The post install section will walk users though the required actions following the base installation. By far, postinstall represents the lions share of the setup and will perform the following tasks: VC/C++ Runtime Installation Git-SCM installaiton VS Code installation Qt configuration (default of full) Initial MSYS2 Setup This process can take from an hour or so to many hours depending on your system resources and internet speed. Note As of this writing (3/6/2021) , the Qt Online Installer has a circular dependency on MS VC redit dll's. They are not present in a new Win-10 image, yet the Qt Online Installer requires them to run. As such, the postinstall script will download and install them for you prior to running the Qt Online Installer .","title":"Post Installation"},{"location":"setup/postinstall/#jtsdk64-tools-setup","text":"After completing the base installation, use the desktop icon or Win-10 search bar to find and open JTSDK64-Tools-Setup . Upon initial opening, you should see the following screen. At the prompt, just hit enter. JTSDK64 Setup Initial Screen Once you are at the Post Install Setup Selection screen you will see the current environment. At the prompt, type: postinstall JTSDK64 Setup Initial Screen","title":"JTSDK64 Tools Setup"},{"location":"setup/postinstall/#tool-selection","text":"For this example, we will be using a minimal install configuration for building WSJT-X . Set the following defaults when asked: VC Redist set tp Y Omnirig set to Y Git-SCM set tp Y Default Qt set tp D MSYS2 Setup set to Y VS Code set to Y Note VS Code is optional. However, it is a highly capable editor that performs many tasks including integrated Bash, PowerShell and Windows CMD terminals. It's up to the user, but, the development team recommends its use. JTSDK64 Setup Tools Selection","title":"Tool Selection"},{"location":"setup/postinstall/#vc-redist-install","text":"The first action will be to downloand and install MS VS Redist. This is mostly automated, but you will be prompeted to allow installation by the normal Windows UAC prompts. VS Redist Installation","title":"VC Redist Install"},{"location":"setup/postinstall/#install-omnirig","text":"Next up is Omnirig. If the download is sucessful (sometimes the download fails, so be prepared) you will see the install wizard appear. Use the defaults and progress through all screens using the Next button. Omnirig Installation Omnirig Install Prompt. Omnirig Installation Prompt","title":"Install Omnirig"},{"location":"setup/postinstall/#install-vs-code","text":"The VS Code installer should appear, and again you should be prompted with the normal Windows UAC prompts. VS Code Installation","title":"Install VS Code"},{"location":"setup/postinstall/#qt-installation","text":"The Qt installation can be a rather lengthy process. The default selection installs all that is needed for a base WSJT-X build. When the UX appears, you will need the following: Your Qt account username/email address Your Qt account Password Qt Account Screen Open Source Obligations. Have a read though them if this is the first time using Qt. Additional, ensure you check the box stating you are an individual user, not a company. Qt Open Source Obligations Sending usage stats. While this is optional, it helps the Qt Developers find and resolve high impacts bugs. Participation is up to the end users, but, it seems a fitting thing to do for the Open Source Community. Qt Contribute to Development Component selction and agreements are pre-selected for you. All that is left at this point is to sit back and wait for the download an installation to progress. Note The only way to cancel the UX at this point (becasue it's scripted) is to use the Windows Task Manager to kill the process (if needed). Qt Download and Installation Upon completion, you will see (in the Powershell Environment) what components were installed. Qt Installed Components Message","title":"Qt Installation"},{"location":"setup/postinstall/#close-jtsdk64-tools-setup","text":"At this point, if there were no errors or problems with the automated installers, you are ready to setup MSYS2. This will all be performed in the standard JTSDK64-Tools environment not JTSDK64-Tools-Setup . Close JTSDK64-Tools-Setup environment. Proceed to the next section.","title":"Close JTSDK64 Tools Setup"},{"location":"setup/prerequisite/","text":"Prerequisites \u00b6 The only prerequisite to running the JTSDK64 Tools Installer is the need for an Qt Account . This is a rescent change is their open-source use policy which prevents anonymous downloading of components via their installer. Note The Offline Installer is no longer available to non-commercial users, thus, JTSDK64-Tools will use the Online Installer exclusively. See Qt Installer Details for more information. Qt Account Registration \u00b6 To create and validate service account, perform the following: Register for an account Use a valid emial address during registration After creating the account, check your email Using the email sent from registration, activate the account Anytime you use the Qt Online Installer or Qt Maintenance Tool, you will need the credentials provided during registration Security Note \u00b6 Caution It is entirly up to the user what to use, however, it is highly recomended that you provide unique credentials for your Qt Account . Do NOT use a sensitive password, or one that you have used elsewhere.","title":"1. Prerequisites"},{"location":"setup/prerequisite/#prerequisites","text":"The only prerequisite to running the JTSDK64 Tools Installer is the need for an Qt Account . This is a rescent change is their open-source use policy which prevents anonymous downloading of components via their installer. Note The Offline Installer is no longer available to non-commercial users, thus, JTSDK64-Tools will use the Online Installer exclusively. See Qt Installer Details for more information.","title":"Prerequisites"},{"location":"setup/prerequisite/#qt-account-registration","text":"To create and validate service account, perform the following: Register for an account Use a valid emial address during registration After creating the account, check your email Using the email sent from registration, activate the account Anytime you use the Qt Online Installer or Qt Maintenance Tool, you will need the credentials provided during registration","title":"Qt Account Registration"},{"location":"setup/prerequisite/#security-note","text":"Caution It is entirly up to the user what to use, however, it is highly recomended that you provide unique credentials for your Qt Account . Do NOT use a sensitive password, or one that you have used elsewhere.","title":"Security Note"},{"location":"tools/overview/","text":"Under Construction This section will discuss the various tools in the development kit.","title":"Overview"},{"location":"wsjtx/overview/","text":"Under Construction This section will discuss various aspects of compiling WSJT-X .","title":"Overview"}]}